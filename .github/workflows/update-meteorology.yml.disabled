# https://github.com/jasonetco/jasonetco/blob/master/.github/workflows/daily-updates.yml

name: Update Meteorology

on:
  schedule:
    - cron: "0 4 * * *" # “At every 04:00.”
    # - cron: "0 * * * *" # “At every 0th minute (a.k.a. every hour).”
  push:
    branches:
      - main

#  xmlstarlet select --template --value-of "/astrodata/location/time/moonphase/@value" --nl .github/workflows/sample.xml

jobs:
  updates:
    name: Update Meteorology
    runs-on: ubuntu-latest
    steps:
      - name: Create Multiline Data
        # With this approach we completely deviate from the GitHub Actions `set-output` notation and instead use environment variables.
        # We’re constructing a [here document](https://tldp.org/LDP/abs/html/here-docs.html) and pushing it incrementally to ${GITHUB_ENV}.
        # By this approach, we are then able to reference this multiline string that is stored in the environment variable as input with ${{ env.<environment_variable> }}.
        # In the following example. it is ${{ env.RANDOM_MULTILINE_DATA }}.
        # https://trstringer.com/github-actions-multiline-strings/
        # https://serverfault.com/questions/72476/clean-way-to-write-complex-multi-line-string-to-a-variable/72511#72511
        run: |
          RANDOM_MULTILINE_STRING=$(cat << EOF
          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
          Phasellus at nulla nisl.
          Fusce vitae nulla a nisi bibendum vehicula.

          <?xml version="1.0" encoding='UTF-8'?>
          <painting>
            <img src="madonna.jpg" alt='Madonna of Foligno, by Raffaello Sanzio da Urbino'
              description="The Madonna of Foligno is a painting by the Italian High Renaissance painter Raffaello Sanzio da Urbino, executed c. 1511–1512."/>
            <caption>This is Raphael's "Foligno" Madonna, painted in
            <date>1511</date>-<date>1512</date>.</caption>
          </painting>

          Nam accumsan finibus ipsum et vestibulum.
          Donec volutpat id nibh in pulvinar.
          EOF
          )
          echo ""
          echo "RANDOM_MULTILINE_DATA<<EOF" >> ${GITHUB_ENV}
          echo "${RANDOM_MULTILINE_STRING}" >> ${GITHUB_ENV}
          echo "EOF" >> ${GITHUB_ENV}
          echo ""
          echo "⇓⇓⇓⇓ \${RANDOM_MULTILINE_STRING} ⇓⇓⇓⇓"
          echo "${RANDOM_MULTILINE_STRING}"
        shell: bash
      - name: Display Multiline Data
        run: |
          echo ""
          echo "⇓⇓⇓⇓⇓⇓⇓⇓ \${env.RANDOM_MULTILINE_DATA} ⇓⇓⇓⇓⇓⇓⇓⇓"
          echo "${{ env.RANDOM_MULTILINE_DATA }}"
        shell: bash

      - name: Install Packages
        run: |
          sudo apt-get update
          sudo apt-get install --assume-yes xmlstarlet
        shell: bash

      - id: fetch-result
        shell: bash
        run: |
          METEOROLOGY_XML_DATA=$(curl \
            --fail \
            --header 'github.com/sheeeng leonard.sheng.sheng.lee@gmail.com' \
            --request 'GET' \
            --show-error \
            --silent \
            --url 'https://api.met.no/weatherapi/sunrise/2.0/?lat=59.933333&lon=10.716667&date=2022-08-25&offset=+02:00' \
            --user-agent 'github.com/sheeeng leonard.sheng.sheng.lee@gmail.com' \
            )
          echo ""
          echo "⇓⇓⇓⇓ \${METEOROLOGY_XML_DATA} ⇓⇓⇓⇓"
          echo "${METEOROLOGY_XML_DATA}" | tee data.xml

          MOONPHASE_VALUE=$(xmlstarlet select --template --value-of "/astrodata/location/time/moonphase/@value" --nl data.xml)
          echo "⇓⇓⇓⇓ \${MOONPHASE_VALUE} ⇓⇓⇓⇓"
          echo "${MOONPHASE_VALUE}"
          echo "::set-output name=moonphase-value::${MOONPHASE_VALUE}"

          MOONSHADOW_AZIMUTH=$(xmlstarlet select --template --value-of "/astrodata/location/time/moonshadow/@azimuth" --nl data.xml)
          echo "⇓⇓⇓⇓ \${MOONSHADOW_AZIMUTH} ⇓⇓⇓⇓"
          echo "${MOONSHADOW_AZIMUTH}"
          echo "::set-output name=moonshadow-azimuth::${MOONSHADOW_AZIMUTH}"

          MOONPOSITION_AZIMUTH=$(xmlstarlet select --template --value-of "/astrodata/location/time/moonposition/@azimuth" --nl data.xml)
          echo "⇓⇓⇓⇓ \${MOONPOSITION_AZIMUTH} ⇓⇓⇓⇓"
          echo "${MOONPOSITION_AZIMUTH}"
          echo "::set-output name=moonposition-azimuth::${MOONPOSITION_AZIMUTH}"

          SOLARMIDNIGHT_TIME=$(xmlstarlet select --template --value-of "/astrodata/location/time/solarmidnight/@time" --nl data.xml)
          echo "⇓⇓⇓⇓ \${SOLARMIDNIGHT_TIME} ⇓⇓⇓⇓"
          echo "${SOLARMIDNIGHT_TIME}"
          echo "::set-output name=solarmidnight-time::${SOLARMIDNIGHT_TIME}"

          MOONRISE_TIME=$(xmlstarlet select --template --value-of "/astrodata/location/time/moonrise/@time" --nl data.xml)
          echo "⇓⇓⇓⇓ \${MOONRISE_TIME} ⇓⇓⇓⇓"
          echo "${MOONRISE_TIME}"
          echo "::set-output name=moonrise-time::${MOONRISE_TIME}"

          SUNRISE_TIME=$(xmlstarlet select --template --value-of "/astrodata/location/time/sunrise/@time" --nl data.xml)
          echo "⇓⇓⇓⇓ \${SUNRISE_TIME} ⇓⇓⇓⇓"
          echo "${SUNRISE_TIME}"
          echo "::set-output name=sunrise-time::${SUNRISE_TIME}"

          HIGH_MOON_TIME=$(xmlstarlet select --template --value-of "/astrodata/location/time/high_moon/@time" --nl data.xml)
          echo "⇓⇓⇓⇓ \${HIGH_MOON_TIME} ⇓⇓⇓⇓"
          echo "${HIGH_MOON_TIME}"
          echo "::set-output name=high_moon-time::${HIGH_MOON_TIME}"

          SOLARNOON_TIME=$(xmlstarlet select --template --value-of "/astrodata/location/time/solarnoon/@time" --nl data.xml)
          echo "⇓⇓⇓⇓ \${SOLARNOON_TIME} ⇓⇓⇓⇓"
          echo "${SOLARNOON_TIME}"
          echo "::set-output name=solarnoon-time::${SOLARNOON_TIME}"

          SUNSET_TIME=$(xmlstarlet select --template --value-of "/astrodata/location/time/sunset/@time" --nl data.xml)
          echo "⇓⇓⇓⇓ \${SUNSET_TIME} ⇓⇓⇓⇓"
          echo "${SUNSET_TIME}"
          echo "::set-output name=sunset-time::${SUNSET_TIME}"

          MOONSET_TIME=$(xmlstarlet select --template --value-of "/astrodata/location/time/moonset/@time" --nl data.xml)
          echo "⇓⇓⇓⇓ \${MOONSET_TIME} ⇓⇓⇓⇓"
          echo "${MOONSET_TIME}"
          echo "::set-output name=moonset-time::${MOONSET_TIME}"

          LOW_MOON_TIME=$(xmlstarlet select --template --value-of "/astrodata/location/time/low_moon/@time" --nl data.xml)
          echo "⇓⇓⇓⇓ \${LOW_MOON_TIME} ⇓⇓⇓⇓"
          echo "${LOW_MOON_TIME}"
          echo "::set-output name=low_moon-time::${LOW_MOON_TIME}"

      - name: Get result
        run: |
          echo ""
          echo "⇓⇓⇓⇓⇓⇓⇓⇓ Moon Phase ⇓⇓⇓⇓⇓⇓⇓⇓
            🌑 :new_moon:                   100/0
            🌒 :waxing_crescent_moon:       0<n<25
            🌓 :first_quarter_moon:         25
            🌔 :moon: :waxing_gibbous_moon: 25<n<50
            🌕 :full_moon:                  50
            🌖 :waning_gibbous_moon:        50<n<75
            🌗 :last_quarter_moon:          75
            🌘 :waning_crescent_moon:"      75<n<100

            moonphase (time, value), value representing:
              0..25: "waxing crescent"
              25..50: "waxing gibbous"
              50..75: "waning gibbous"
              75..100: "waning crescent"


          echo "${{ steps.fetch-result.outputs.moonphase-value }}"
          echo "${{ steps.fetch-result.outputs.moonshadow-azimuth }}"
          echo "${{ steps.fetch-result.outputs.moonposition-azimuth }}"
          echo "${{ steps.fetch-result.outputs.solarmidnight-time }}"
          echo "${{ steps.fetch-result.outputs.moonrise-time }}"
          echo "${{ steps.fetch-result.outputs.sunrise-time }}"
          echo "${{ steps.fetch-result.outputs.high_moon-time }}"
          echo "${{ steps.fetch-result.outputs.solarnoon-time }}"
          echo "${{ steps.fetch-result.outputs.sunset-time }}"
          echo "${{ steps.fetch-result.outputs.moonset-time }}"
          echo "${{ steps.fetch-result.outputs.low_moon-time }}"

      # - uses: actions/checkout@v3
      # - uses: actions/setup-node@v2
      #   with:
      #     node-version: 18
      # - run: npm install --global yarn
      # - run: yarn add moment moment-timezone txml node-fetch@2.6.1 # https://stackoverflow.com/a/70541151
      # - uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.USER_SCOPE_PERSONAL_ACCESS_TOKEN }}
      #     script: |
      #       const script = require('.github/workflows/update-meteorology.js')
      #       console.log(await script({github, context, core}))
